/*
 # examples/dist.basic.ts
 # Basic Distribution Example
 */

//  import { MarkovChain } from '..';
const { Distribution } = require('../lib');

// Create a Deck of Cards
const suits = ['‚ô£Ô∏è', '‚ô¶Ô∏è', '‚ô•Ô∏è', '‚ô†Ô∏è'];
const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

// Combine the Suits and Ranks
const cards = suits.reduce((last, suit) => {
  return [...last, ...ranks.map(rank => `${rank}${suit}`)];
}, []);

/* Should result in:
[
  'A‚ô£Ô∏è',  '2‚ô£Ô∏è',  '3‚ô£Ô∏è',  '4‚ô£Ô∏è', '5‚ô£Ô∏è', '6‚ô£Ô∏è', '7‚ô£Ô∏è',
  '8‚ô£Ô∏è',  '9‚ô£Ô∏è',  '10‚ô£Ô∏è', 'J‚ô£Ô∏è', 'Q‚ô£Ô∏è', 'K‚ô£Ô∏è', 'A‚ô¶Ô∏è',
  '2‚ô¶Ô∏è',  '3‚ô¶Ô∏è',  '4‚ô¶Ô∏è',  '5‚ô¶Ô∏è', '6‚ô¶Ô∏è', '7‚ô¶Ô∏è', '8‚ô¶Ô∏è',
  '9‚ô¶Ô∏è',  '10‚ô¶Ô∏è', 'J‚ô¶Ô∏è',  'Q‚ô¶Ô∏è', 'K‚ô¶Ô∏è', 'A‚ô•Ô∏è', '2‚ô•Ô∏è',
  '3‚ô•Ô∏è',  '4‚ô•Ô∏è',  '5‚ô•Ô∏è',  '6‚ô•Ô∏è', '7‚ô•Ô∏è', '8‚ô•Ô∏è', '9‚ô•Ô∏è',
  '10‚ô•Ô∏è', 'J‚ô•Ô∏è',  'Q‚ô•Ô∏è',  'K‚ô•Ô∏è', 'A‚ô†Ô∏è', '2‚ô†Ô∏è', '3‚ô†Ô∏è',
  '4‚ô†Ô∏è',  '5‚ô†Ô∏è',  '6‚ô†Ô∏è',  '7‚ô†Ô∏è', '8‚ô†Ô∏è', '9‚ô†Ô∏è', '10‚ô†Ô∏è',
  'J‚ô†Ô∏è',  'Q‚ô†Ô∏è',  'K‚ô†Ô∏è'
]
*/

// Create weighted source data for the Distribution
const src = cards.reduce((last, card) => ({ ...last, [card]: 1 }), {});

// Add in 2 Jokers
src['üÉè'] = 2;

/* Should result in:
{
  'A‚ô£Ô∏è': 1,
  '2‚ô£Ô∏è': 1,
  '3‚ô£Ô∏è': 1,
  ...
  'J‚ô†Ô∏è': 1,
  'Q‚ô†Ô∏è': 1,
  'K‚ô†Ô∏è': 1,
  'üÉè': 2
}
*/

console.log(src);

// Create the Distribution from the deck.
const deck = new Distribution({
  seed: 23,       // Random Seed - if this is empty it will be generated.
  source: src,    // The weighted source to generate the normalized Distribution from.
});

// Generate 4 picks from the deck without replacement.
const picks = deck.pick(4, undefined, true);
console.log(picks);

/* Should print:

[ 'J‚ô£Ô∏è', '10‚ô†Ô∏è', '3‚ô¶Ô∏è', '9‚ô£Ô∏è' ]

*/
